title: 'Will Kobe Bryant Make His Next Shot:  Linear Discriminant Analysis and Logistic Regression using R'
author:
- Paul Adams
- Reannan McDaniel
- Jeff Nguyen
- Southern Methodist University
date: "`r format(Sys.time(), '%d %B %Y')`"
output:
  pdf_document: default
  html_document:
    df_print: paged
df_print: paged
---
```{r Setup and Loading Packages, echo=F, include=F, warning=F}

library(tidyverse)
library(skimr)
library(olsrr)
library(ggplot2)
library(dplyr)
library(RCurl)
library(caret)
library(corrplot)
library(lmtest)
library(multcomp)
library(ggthemes)
library(Hmisc)
library(tidyr)
library(cluster)
library(robustbase)
library(pacman)
p_load(rrcov, MASS, dplyr, purrr, ggplot2, Hmisc, pcaPP, knitr, kableExtra) #( Hmisc is for correlation matrix rcorr() )

# read in modeling data

url <- getURL("https://raw.githubusercontent.com/7446Nguyen/Applied-Statistics-Classification/master/modelingKobeData.csv")

df <- read.csv(text = url, header=T, sep=",", strip.white=T, stringsAsFactors = F, na.strings=c(""))
which(is.na(df$shot_zone_range))
view(df)
str(df)
ncol(df)
skim(df)
```
# **Abstract:**  
### *This project investigates the correlation between multiple potential explanatory variables and Kobe Bryant's ability to make a shot while playing for the NBA team Los Angeles Lakers using data gathered from `1996`-`2015`.*
  
# **Exploratory Data Analysis**

### In preparation for analysis, derrived data was neeeded to simplify overly complicated variables for the model. The over-complication is with respect to the availability of other predictor variables.

```{r Data Transformations Phase One, echo=F, warning=F}
df[which(df$action_type == "Alley Oop Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Cutting Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Driving Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Follow Up Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Putback Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Reverse Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Finger Roll Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Reverse Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Running Tip Shot"),"action_type"] = "short"
df[which(df$action_type == "Slam Dunk Shot"),"action_type"] = "short"
df[which(df$action_type == "Tip Layup Shot"),"action_type"] = "short"
df[which(df$action_type == "Tip Shot"),"action_type"] = "short"
df$action_type <- ifelse(df$action_type=="short", "short", "long")
# shots with "Dunk", "Layup", or "Tip" are short:
df[which(df$combined_shot_type == "Dunk"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Layup"),"combined_shot_type"] = "short"
df[which(df$combined_shot_type == "Tip Shot"),"combined_shot_type"] = "short"
df$combined_shot_type <- ifelse(df$combined_shot_type=="short", "short", "far")
```

``` {r echo=F, warning=F}

# calculate odds ratio
oddsratio(df, log = FALSE)









```


### Next, we removed one-level factors. These will never change so are not useful to the model; including can cause issues with model sensitivity since linear trajectories will be down-weighted. Therefore, their significance will be lessened by the constant state of the additional parameters. While this is may not be significant, it is not condusive to model quality.
```{r Transformations Phase Two, echo=F, warning=F}
badNews <- "Sorry, but your math is off and the transformations were not performed. Please update and try again."
tryCatch(
    {
    # Convert all integers to numeric and characters to factors with levels:
    df <- df %>% mutate_if(is.integer, as.numeric) %>% mutate_if(is.character, as.factor) %>% data.frame()
    df <- df %>% 
      subset(select=-c(team_id, # dropping since this is a uniform distribution of data
                       team_name, # dropping since this is a uniform distribution of data. Also collinear with team_id
                       action_type, # dropping this in favor of combined_shot_type
                       shot_zone_area, # this is ambiguous and less descriptive than geospatial data
                       shot_zone_basic, # this is ambiguous and less descriptive than geospatial data
                       shot_zone_range, # this is ambiguous and less descriptive than geospatial data
                       matchup # removing in favor of opponent; Kobe only played for LAL so that will never change
                                  )
                        )
    # create numeric dataframe for correlation plot
    df.numeric <- df %>% keep(is.numeric)
    
    },
    error = function(e)
    {
      badNews
    }
)
```

## **Outlier Check**
### A brief outlier check indicated a 2PT Field Goal was noted from the 3PT (3-point) range. Regardless of the actual score, the location matters more. Therefore, after confirming these values to be within 3PT-range, all shots will be encoded as 3-point once beyond 300 inches.
```{r outlier check, echo=F, include= F, warning=F}
df[which(df$loc_y > 300),"shot_type"] <- "3PT Field Goal"
# Convert the points to integer values since they have integer value in reality
df$shot_type <- ifelse(df$shot_type=="2PT Field Goal", 2, 3)
```


## **Addressing Multicollinearity: Correlation Plot for Visual Data Exploration**
### To address multicollinearity among quantitative predictor variables, we used a correlation matrix.
```{r Multicollinearity, echo=F, include=T, warning=F}
corrplot::corrplot(cor(df.numeric %>% subset(select=-c(shot_made_flag)))
                   , title = "Correlation of Quantitative Predictor Variables, Before Variable Elimination"
                   , type = "lower"
                   , tl.pos = "ld"
                   , method = "square"
                   , tl.cex = 0.65
                   , tl.col = 'red'
                   , order = "alphabet"
                   , diag = F
                   , mar=c(0,0,5,0)
                   , bg="ivory1"
                   ,tl.srt=.05
)
```

## **Post-Correlation Plot Variable Elimination**
### Following our correlation plot, we decided to eliminate some collinear terms. However, some of the collinearity is useful to capture the instances where the terms are unique. For example, `combined_shot_type` (factor variable) is collinear with `shot_distance` (quantitative variable), but it also accounts for the method Kobe may use to make a shot. For example, distance may be relatively the same between 10 and 11 feet, but the factor levels used to derrive their `short` or `far` indications may differ. This difference could be whether Kobe makes a potentially more accurate heel-planted shot or if he is forced to lean forward and take a riskier shot at basket; the difference in distance may only be one foot, but the difference in technique could measure significant relative to the odds of success.
```{r Post-Correlation Plot Variable Elimination, echo=F, warning=F}
df <- df %>% subset(select=-c(lat, # dropping lat because it is collinear with loc_y and shot_distance
                              lon, # dropping lon because it is collinear with loc_x and shot_distance
                              period, # dropping period in favor of game event id because game event id is more descriptive and continuous
                              playoffs # dropping playoffs for game_id; game ID can capture playoffs seasonally
                             )
                    )
df.numeric <- df %>% keep(is.numeric) %>% mutate_if(is.integer, as.numeric)
```

## **Addressing Multicollinearity: Correlation Matrix for Numerical Analysis**
###Following the removal of the most obvious collinear terms visually performing a correlation plot analysis, a correlation matrix for analyzing the remaining results. Collinear quantitative data was preliminarily removed following correlation plot analysis to desaturate the model to an extent that allows more distinction among significance measures for terms in the correlation matrix.
```{r Correlation Matrix for Quantitative Data, echo=F, include=T, warning=F}
flattenCorrMatrix <- function(cormatrix, pmatrix) {
  ut <- upper.tri(cormatrix)
  data.frame(
    row = rownames(cormatrix)[row(cormatrix)[ut]],
    column = rownames(cormatrix)[col(cormatrix)[ut]],
    cor  =(cormatrix)[ut],
    p = pmatrix[ut]
  )
}
options(scipen=999)
options(max.print=100000)
#See what variables are correlated with eachother, p-values
correlation.matrix <- Hmisc::rcorr(as.matrix(df.numeric), type="pearson")
corDF <- data.frame(flattenCorrMatrix(correlation.matrix$r, correlation.matrix$P))
corDF.ordered <- data.frame(corDF[order(-corDF$cor),])
collinear.correlation <- corDF[which(corDF$cor >= 0.50),]
collinear.correlation <- data.frame(collinear.correlation[order(-collinear.correlation$cor),])
collinear.correlation
#write.csv(colinear.correlation, "Collinear_Correlation_Matrix.csv")
#write.csv(corDF.ordered, "All_Vars_Correlation_Matrix.csv")
```

# **Quadratic Discriminant Analysis**
### As requested within the requirements of this study, a Linear Discriminant Analysis must be assessed and provided. Discriminant analysis is an operation that compares a categorical response variable against measures of quantitative predictor variables. As a result, analysis for this section is performed on the numerical predictors, which include `recId`, `game_event_id`, `game_id`, `loc_x`, `loc_y`, `minutes_remaining`, `seconds_remaining`, `shot_distance`, `shot_made_flag`, `shot_type`, `game_date`, `shot_id`, `attendance`, `arena_temp`, `avgnoisedb`, controlling collinearity by eliminating a member of each collinear pair prior to model development.
###
###Linear Discriminant Analysis requires a linear boundary between the predictor variables, respective of the response. If the boundary between predictors and response is not linear, Quadratic Discriminant Analysis must be used. Wilks' Lambda distribution is used to assess the nature of boundary linearity, which can be used for discriminant analysis. However, because of the large dimensions of the data set analyzed in this study, an approximation of Wilks' Lambda must be used. Bartlett's Test is an approximation of Wilks' Lambda that can be used for models with large dimensions by applying a measure against the Chi-Square distribution. Provided is a test statistic and p-value.

### **Bartlett's Test:**
```{r Quadratic Discriminant Analysis: Test Identification, echo=F, include=F, warning=F}
Bartlett_ChiSq <- rrcov::Wilks.test(shot_made_flag ~ ., data=df.numeric, method = "c", approximation = "Bartlett")
# Wilk's Lambda produces significant p-value in Bartlett's test so we need to use a Quadratic Discriminant Analysis instead of Linear
format(round(Bartlett_ChiSq$p.value, 2), nsmall=4)
# Wilks' Lambda plus degrees of freedom used in Bartlett's chi-squared test
WilksDegreesofFreedom <- rbind(as.numeric(paste0(Bartlett_ChiSq$parameter, sep = " ")))
# p-value from Bartlett's test
Bartlett_ChiSq$p.value
Bartletts_p <- format(round(as.numeric(Bartlett_ChiSq$p.value), 2), nsmall=4)
# Because Bartlett's p-value is less than 0.0001 (indicated above), updating to shorter form:
Bartletts_p = ifelse(Bartlett_ChiSq$p.value < 0.0001, "p < 0.0001", Bartlett_ChiSq$p.value)
#Bartletts_p <- "p < 0.0001"
dfBartlett <- data.frame(WilksDegreesofFreedom, Bartlett_ChiSq$wilks, Bartletts_p)
colnames(dfBartlett) <- c("Chi-Square Statistic", "Degrees of Freedom", "Wilks' Lambda", "p-value")
```

```{r Bartletts Resutls, echo=F, include=T, warning=F}
kable(data.frame("Chi-Square Statistic" = dfBartlett$`Chi-Square Statistic`,
                 "Degrees of Freedom" = dfBartlett$`Degrees of Freedom`,
                 "Wilks' Lambda" = dfBartlett$`Wilks' Lambda`,
                 "p-value" = Bartletts_p),
      format="markdown", booktabs = T)  %>%
  kable_styling(position = "center")
```
### Bartlett's Test of this data set yielded a significant p-value, where p < 0.0001, indicating that the proportion of distribution beyond the derrived test statistic is beyond that which could be explained by chance. Therefore, we must reject the null hypothesis that the boundary for analysis is linear; the boundary is non-linear. Thus, an analysis using Quadratic Discriminant Analysis is applied.
```{r Quadratic Discriminant Analysis: Test Production, echo=F, warning=F}
# MASS package used for qda()
#df.numeric <- df.numeric[order(df.numeric$shot_made_flag),]
kobe.qda <- qda(shot_made_flag ~ ., CV=T, data=df.numeric)
data.frame(mean(kobe.qda$posterior[,1]), mean(kobe.qda$posterior[,2]))
shot_made_flagg <- rbind("0", "1")
proportion <- rbind(mean(kobe.qda$posterior[,1]), mean(kobe.qda$posterior[,2]))
data.frame(shot_made_flagg, proportion) # Class Level Information
#caret::confusionMatrix(table(kobe.qda$posterior[,1], dfKobe$shot_made_flag))
#qda.pred <- predict(kobe.qda)$class
```

# **Logistic Model Development using Ordinary Least Squares**
### A preliminary, manual veriable elimination process was performed during the analysis of multicollinear terms in preparation for model development. Below we perform logistic regression using Ordinary Least Squares (OLS). In preparation for the model development, a starting model and a finishing model must be developed to provide the scope of variable selection.
```{r Variable Boundaries Models, echo=F, warning=F}
model.forward.Start <- glm(shot_made_flag~1, family=binomial(link='logit'), data = df)
model.Allvar <- glm(shot_made_flag ~ recId + combined_shot_type + game_event_id + game_id + loc_x + loc_y +
                      minutes_remaining + season + seconds_remaining + shot_distance + shot_type + game_date +
                      opponent + shot_id + attendance + arena_temp + avgnoisedb, family=binomial(link='logit'), data = df)
```

## **Forward Selection**
### Forward selection produced a model that produced an Akaike's Information Criterion score of 27,378.
###
### Forward Selection Model:
### $shot_made flag = shot distance + attendance + combined shot type + arena temp + game event id + seconds remaining + shot type + game date + minutes remaining + loc y + shot id$
```{r Logistic Regression: Forward Selection, echo=F, include=F, warning=F}
#### Forward Selection
model.Forward <- stepAIC(model.forward.Start, direction = "forward", trace = F, scope = formula(model.Allvar))
summary(model.Forward)
model.Forward$anova
#################################### Forward Selection Model Suggestion
forward.glm <- glm(shot_made_flag ~ shot_distance + attendance + combined_shot_type + arena_temp + game_event_id + 
                      seconds_remaining + shot_type + game_date + minutes_remaining + loc_y + shot_id
                    , family=binomial(link='logit')
                    , data=df)
summary(forward.glm)
########################################################################
```

## **Forward Selection - Akaike's Information Criterion for Logistic Regression:**
```{r akaikes foreward, echo=F, include=T}
kable(data.frame("Akaikes Information Criterion: Foreward Selection" = forward.glm$aic),
      format="markdown", booktabs = T)  %>%
  kable_styling(position = "center")
```

## **Backward Elimination**
### Backward elimination produced a model that produced an Akaike's Information Criterion score of 27,378.
###
### Backward Elimination Model:
### $shot made flag = combined shot type + game event id + loc y + minutes remaining + seconds remaining + shot distance + shot type + game date + shot id + attendance + arena temp$
```{r Logistic Regression: Backward Elimination, echo=F, include=F, warning=F}
# Backward Elimination
model.Backward <- stepAIC(model.Allvar, direction = "backward", trace = F, scope = formula(model.forward.Start))
summary(model.Backward)
model.Backward$anova
#################################### Backward Elimination Model Suggestion
back.glm <- glm(shot_made_flag ~ combined_shot_type + game_event_id + loc_y + 
                  minutes_remaining + seconds_remaining + shot_distance + shot_type + 
                  game_date + shot_id + attendance + arena_temp, family=binomial(link='logit')
                , data=df)
summary(back.glm)
back.glm$aic
########################################################################
```

## **Backward Elmination - Akaike's Information Criterion for Logistic Regression:**
```{r akaikes backward, echo=F, include=T, warning=F}
kable(data.frame("Akaikes Information Criterion: Backward Elimination" = back.glm$aic),
      format="markdown", booktabs = T)  %>%
  kable_styling(position = "center")
```

## **Stepwise Regression**
### Stepwise Regression produced a model that produced an Akaike's Information Criterion score of 27,378.
###
### Stepwise Regression Model:
### $shot made flag = combined shot type + game event id + loc y + minutes remaining + seconds remaining + shot distance + shot type + game date + shot id + attendance + arena temp$
```{r Logistic Regression: Stepwise Regression, echo=F, include=F, warning=F}
# Stepwise Regression
model.Stepwise <- stepAIC(model.Allvar, direction = "both", trace = F)
summary(model.Stepwise)
model.Stepwise$anova
#################################### Stepwise Regression Model Suggestion
step.glm <- glm(shot_made_flag ~ combined_shot_type + game_event_id + loc_y + 
                  minutes_remaining + seconds_remaining + shot_distance + shot_type + 
                  game_date + shot_id + attendance + arena_temp
                , family=binomial(link='logit')
                , data=df)
summary(step.glm)
step.glm$aic
########################################################################
```

## **Stepwise Regression - Akaike's Information Criterion for Logistic Regression:**
```{r akaikes, echo=F, include=T}
kable(data.frame("Akaikes Information Criterion: Stepwise Regression" = step.glm$aic),
      format="markdown", booktabs = T)  %>%
  kable_styling(position = "center")
```



###################################################################################
OddsRatio

title: 'Will Kobe Bryant Make His Next Shot:  Linear Discriminant Analysis and Logistic Regression using R'
author:
- Paul Adams
- Reannan McDaniel
- Jeff Nguyen
- Southern Methodist University
date: "`r format(Sys.time(), '%d %B %Y')`"
output:
  pdf_document: default
  html_document:
    df_print: paged
df_print: paged

library(pacman)
library(tidyverse)
library(skimr)
library(olsrr)
library(ggplot2)
library(dplyr)
library(RCurl)
library(caret)
library(corrplot)
library(lmtest)
library(multcomp)
library(ggthemes)
library(Hmisc)
library(tidyr)
library(cluster)
library(robustbase)
library(vcd)
library(glm)
library(oddsratio)
p_load(rrcov, MASS, dplyr, purrr, ggplot2, Hmisc, pcaPP, knitr, kableExtra, caret, cluster, robustbase, plotly)
url <- getURL("https://raw.githubusercontent.com/7446Nguyen/Applied-Statistics-Classification/master/modelingKobeData.csv")
kobe <-read.csv(text = url, header=T, sep=",", strip.white=T, stringsAsFactors = F, na.strings=c(""))
skimr::skim(kobe)

numericVars = kobe %>% keep(is.numeric)
view(kobe)

OR <- glm(shot_made_flag ~ shot_distance + shot_zone_area + shot_zone_basic, data = kobe, family = "binomal")

#Odds Ratios
oddsratio(shot_distance, level = 0.95)
odds.ratio(shot_zone_area, level = 0.95)
oddsratio(shot_zone_basic, level = 0.95)
#Indvidual shot and CI
##shot_zone_areaCenter(C)
exp(coef())
exp(confint())
##shot_zone_areaLeft Side Center(LC)
exp(coef())
exp(confint())
##shot_zone_areaLeft(L)
exp(coef())
exp(confint())
##shot_zone_areaRight Side Center(RC)
exp(coef())
exp(confint())
##shot_zone_areaRight(R)
exp(coef())
exp(confint())
##shot_zone_basicBackcourt
exp(coef())
exp(confint())
##shot_zone_basicIn The Paint (Non-RA)
exp(coef())
exp(confint())
##shot_zone_basicLeft Corner 3
exp(coef())
exp(confint())
##shot_zone_basicMid-Range
exp(coef())
exp(confint())
##shot_zone_basicRestricted Area
exp(coef())
exp(confint())
##shot_zone_basicRight Corner 3
exp(coef())
exp(confint())

#Boxplot for Odds by area or distance
boxLabels = c("shot_zone_areaCenter(C)", "shot_zone_areaLeft Side Center(LC)", "shot_zone_areaLeft(L)", "shot_zone_areaRight Side Center(RC)", "shot_zone_areaRight(R)", "shot_zone_basicBackcourt", "shot_zone_basicIn The Paint (Non-RA)", "shot_zone_basicLeft Corner 3", "shot_zone_basicMid-Range", "shot_zone_basicRestricted Area", "shot_zone_basicRight Corner 3")
kobe_OR <- data.frame(yAxis = length(boxLabels)):1, boxOdds = log(c()), 
  boxCILow = c(), 
  boxCIHigh = c())

#plot with CI
plot1 <- ggplot(df, aes(x = boxOdds, y = boxLabels)) 

(plot1 <- ggplot(df, aes(x = boxOdds, y = boxLabels)) + 
    geom_vline(aes(xintercept = 0), size = .25, linetype = "dashed") + 
    geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow), size = .5, height = 
                     .2, color = "gray50") +
    geom_point(size = 3.5, color = "orange") +
    coord_trans(x = scales:::exp_trans(10)) +
    scale_x_continuous(breaks = log10(seq(0.1, 2.5, 0.1)), labels = seq(0.1, 2.5, 0.1),
                       limits = log10(c(0.09,2.5))) +
    theme_bw()+
    theme(panel.grid.minor = element_blank()) +
    ylab("") +
    xlab("Odds ratio") +
    annotate(geom = "text", y =1.1, x = log10(1.5) + 
    ggtitle("Distance-Odds Kobe makes the shot")) 






